[tasks]
main = "docker-compose-psql"
version = "uv run src/docker_compose_psql/show_version.py"
select = "uv run src/docker_compose_psql/select.py"
insert = "uv run src/docker_compose_psql/insert.py"
insert3 = "uv run src/docker_compose_psql/insert3.py"
delete = "uv run src/docker_compose_psql/delete.py"

# ======== docker compose で PostgreSQL
up = "docker compose up -d"
down = "docker compose down"
log = "docker compose logs -f"
rmv = "docker compose down --volumes --remove-orphans"
clean = ["down", "rmv"]
ps = "docker compose ps"

# ======== postgresqlのイメージ内のpsqlを使ってみる
## 中からはtrustなのでパスワードなしで入れる
## `-e PGPASSWORD=$POSTGRES_PASSWORD` は不要

psql_ver.help = "新しくコンテナを立ち上げてpsqlを実行"
psql_ver.cmd = "docker run --rm postgres:17 psql --version"

psql_ver2.help = "いま動いているコンテナ内でpsqlを実行"
psql_ver2.cmd = "docker compose exec postgres psql --version"

psql_ver3.help = "いま動いているコンテナ内でpsqlを使って `select version();` を実行"
psql_ver3.envfile = "./.env"
psql_ver3.cmd = """
docker compose exec -T postgres \
psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB	-c
"select version();"
"""

psql_select.envfile = "./.env"
psql_select.cmd = """
docker compose exec -T postgres \
psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB	-c\
'select * from users;'
"""

shell = "docker compose exec -it postgres bash"

psql.envfile = "./.env"
psql.cmd = """
docker compose exec -it postgres bash -c \
"/usr/bin/psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB"
"""

log_all2.envfile = "./.env"
log_all2.cmd = """
docker compose exec -T postgres \
psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -X -c "ALTER SYSTEM SET log_statement='all';"
"""
log_none2.envfile = "./.env"
log_none2.cmd = """
docker compose exec -T postgres \
psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -c "ALTER SYSTEM RESET log_statement;"
"""
reload_conf.envfile = "./.env"
reload_conf.cmd = """
docker compose exec -T postgres \
psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -X -c "SELECT pg_reload_conf();"
"""

log_all = ["log_all2", "reload_conf"]
log_none = ["log_none2", "reload_conf"]

# ======== utils
format.shell = """
ruff format &&
# biome format --write . &&
dprint fmt --config ~/dprint.json &&
textlint --fix "**/*.md"
"""

check = "ruff check ./src"
mypy = "mypy src"

update.shell = "uv lock -U && uv sync && uv cache prune"

uvsync = "uv sync"
requirements = "uv pip compile pyproject.toml --no-deps -o requirements.txt"
sync = ["uvsync", "requirements"]

trivy-config = "trivy config ."
trivy-fs = "trivy fs ."
trivy-check = ["trivy-config", "trivy-fs"]
trivy = ["trivy-check"]
trivy-license = "trivy fs --scanners license --severity HIGH,CRITICAL ."
trivy-sbom = "trivy fs --scanners vuln --format cyclonedx --output sbom.cdx.json ."
trivy-sbom-spdx = "trivy fs --scanners vuln --format spdx-json --output sbom.spdx.json ."
sbom = ["requirements", "trivy-sbom", "trivy-sbom-spdx"]
